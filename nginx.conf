worker_processes 1;
daemon off;

error_log <%= ENV["APP_ROOT"] %>/nginx/logs/error.log;
events { worker_connections 1024; }

http {
  log_format cloudfoundry '$http_x_forwarded_for - $http_referer - [$time_local] "$request" $status $body_bytes_sent';
  access_log <%= ENV["APP_ROOT"] %>/nginx/logs/access.log cloudfoundry;
  default_type application/octet-stream;
  include mime.types;
  sendfile on;

  gzip on;
  gzip_disable "msie6";
  gzip_comp_level 6;
  gzip_min_length 1100;
  gzip_buffers 16 8k;
  gzip_proxied any;
  gzip_types text/plain text/css text/js text/xml text/javascript application/javascript application/x-javascript application/json application/xml application/xml+rss;

  tcp_nopush on;
  keepalive_timeout 30;
  port_in_redirect off; # Ensure that redirects don't include the internal container PORT - <%= ENV["PORT"] %>
  server_tokens off;

  server {
    listen <%= ENV["PORT"] %>;
    server_name localhost;

    <% if File.exists?(auth_file = File.join(ENV["APP_ROOT"], "nginx/conf/.htpasswd")) %>
    auth_basic "Restricted";
    auth_basic_user_file <%= auth_file %>;
    <% end %>

    <% require 'json' %>
    <% proxies = JSON.parse(ENV["PROXIES"] || "{}") %>
    <%
      def getenv(key)
        services = JSON.parse(ENV["VCAP_SERVICES"] || "{}")["user-provided"] || []
        ENV[key] ||
          services.map { |service|
            service["credentials"][key]
          }.find { |value|
            value
          }
      end
      def string_to_sign(headers)
        keys = ["$request_method"]
        keys.concat(headers.map { |header| "$http_#{header}" })
        keys.concat(["$request_uri", "$request_body"])
        return keys.join("\\n")
      end
      secret = getenv("HMAC_SECRET")
      headers = (getenv("HMAC_HEADERS") || "").split(",")
    %>

    <% proxies.each do |path, route| %>
      location <%= path %> {
        resolver 8.8.8.8;
        set $backend "<%= route %>";
        proxy_pass $backend;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Script-Name "<%= path %>";

        <% if secret %>
        set_hmac_sha1 $signature "<%= secret %>" "<%= string_to_sign(headers) %>";
        set_encode_base64 $signature $signature;
        proxy_set_header X-Signature "sha1 $signature";
        <% end %>
      }
    <% end %>
  }
}
